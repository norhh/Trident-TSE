(set-logic QF_ABV)
(declare-fun lhole_value_arg1_a_DONE () (_ BitVec 32))
(declare-fun value_arg1_a () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun value_arg1_a_DONE () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun value_arg2_c () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun rhole_value_arg2_c () (_ BitVec 32))
(declare-fun rreturn () (_ BitVec 32))
(declare-fun rhole_value_arg1_a () (_ BitVec 32))
(assert (let ((.def_0 (= rreturn #b00000000000000000000000000000000))) (let ((.def_1 (select value_arg1_a #b00000000000000000000000000000000))) (let ((.def_2 (select value_arg1_a #b00000000000000000000000000000001))) (let ((.def_3 (select value_arg1_a #b00000000000000000000000000000010))) (let ((.def_4 (select value_arg1_a #b00000000000000000000000000000011))) (let ((.def_5 (concat .def_4 .def_3))) (let ((.def_6 (concat .def_5 .def_2))) (let ((.def_7 (concat .def_6 .def_1))) (let ((.def_8 (= rhole_value_arg1_a .def_7))) (let ((.def_9 (select value_arg1_a_DONE #b00000000000000000000000000000000))) (let ((.def_10 (select value_arg1_a_DONE #b00000000000000000000000000000001))) (let ((.def_11 (select value_arg1_a_DONE #b00000000000000000000000000000010))) (let ((.def_12 (select value_arg1_a_DONE #b00000000000000000000000000000011))) (let ((.def_13 (concat .def_12 .def_11))) (let ((.def_14 (concat .def_13 .def_10))) (let ((.def_15 (concat .def_14 .def_9))) (let ((.def_16 (= lhole_value_arg1_a_DONE .def_15))) (let ((.def_17 (select value_arg2_c #b00000000000000000000000000000000))) (let ((.def_18 (select value_arg2_c #b00000000000000000000000000000001))) (let ((.def_19 (select value_arg2_c #b00000000000000000000000000000010))) (let ((.def_20 (select value_arg2_c #b00000000000000000000000000000011))) (let ((.def_21 (concat .def_20 .def_19))) (let ((.def_22 (concat .def_21 .def_18))) (let ((.def_23 (concat .def_22 .def_17))) (let ((.def_24 (= rhole_value_arg2_c .def_23))) (let ((.def_25 (select value_arg1_a_DONE #b00000000000000000000000000001000))) (let ((.def_26 ((_ sign_extend 24) .def_25))) (let ((.def_27 (select value_arg1_a #b00000000000000000000000000001000))) (let ((.def_28 ((_ sign_extend 24) .def_27))) (let ((.def_29 (bvadd #b00000000000000000000000000000001 .def_28))) (let ((.def_30 ((_ extract 7 0) .def_29))) (let ((.def_31 ((_ sign_extend 24) .def_30))) (let ((.def_32 (= .def_31 .def_26))) (let ((.def_33 (ite .def_32 #b1 #b0))) (let ((.def_34 ((_ zero_extend 31) .def_33))) (let ((.def_35 (select value_arg1_a_DONE #b00000000000000000000000000000100))) (let ((.def_36 (select value_arg1_a_DONE #b00000000000000000000000000000101))) (let ((.def_37 (concat .def_36 .def_35))) (let ((.def_38 (select value_arg1_a_DONE #b00000000000000000000000000000110))) (let ((.def_39 (concat .def_38 .def_37))) (let ((.def_40 (select value_arg1_a_DONE #b00000000000000000000000000000111))) (let ((.def_41 (concat .def_40 .def_39))) (let ((.def_42 (concat .def_18 .def_17))) (let ((.def_43 (concat .def_19 .def_42))) (let ((.def_44 (concat .def_20 .def_43))) (let ((.def_45 (select value_arg1_a #b00000000000000000000000000000100))) (let ((.def_46 (select value_arg1_a #b00000000000000000000000000000101))) (let ((.def_47 (concat .def_46 .def_45))) (let ((.def_48 (select value_arg1_a #b00000000000000000000000000000110))) (let ((.def_49 (concat .def_48 .def_47))) (let ((.def_50 (select value_arg1_a #b00000000000000000000000000000111))) (let ((.def_51 (concat .def_50 .def_49))) (let ((.def_52 (bvsub .def_51 .def_44))) (let ((.def_53 (= .def_52 .def_41))) (let ((.def_54 (ite .def_53 #b1 #b0))) (let ((.def_55 ((_ zero_extend 31) .def_54))) (let ((.def_56 (concat .def_10 .def_9))) (let ((.def_57 (concat .def_11 .def_56))) (let ((.def_58 (concat .def_12 .def_57))) (let ((.def_59 (concat .def_2 .def_1))) (let ((.def_60 (concat .def_3 .def_59))) (let ((.def_61 (concat .def_4 .def_60))) (let ((.def_62 (bvadd .def_61 .def_44))) (let ((.def_63 (= .def_62 .def_58))) (let ((.def_64 (ite .def_63 #b1 #b0))) (let ((.def_65 ((_ zero_extend 31) .def_64))) (let ((.def_66 (bvand .def_65 .def_55))) (let ((.def_67 (bvand .def_66 .def_34))) (let ((.def_68 (= #b00000000000000000000000000000000 .def_67))) (let ((.def_69 (not .def_68))) (let ((.def_70 (and .def_69 .def_24 .def_16 .def_8))) (let ((.def_71 (and .def_70 .def_0))) .def_71)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
